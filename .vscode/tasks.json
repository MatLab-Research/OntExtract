{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Check: AI API keys present",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "set -a; [ -f .env ] && . ./.env; [ -f .env.local ] && . ./.env.local; [ -f local.env ] && . ./local.env; set +a; \nif [ -n \"$GOOGLE_GEMINI_API_KEY\" ] || [ -n \"$LANGEXTRACT_API_KEY\" ] || [ -n \"$ANTHROPIC_API_KEY\" ]; then echo 'OK: Found at least one AI API key'; exit 0; else echo 'FAIL: Missing GOOGLE_GEMINI_API_KEY / LANGEXTRACT_API_KEY / ANTHROPIC_API_KEY'; exit 1; fi"
      ],
      "problemMatcher": []
    },
    {
      "label": "Install: dependencies (venv)",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "${workspaceFolder}/.venv/bin/python -m pip install -U pip && ${workspaceFolder}/.venv/bin/python -m pip install -r requirements.txt"
      ],
      "problemMatcher": []
    },
    {
      "label": "Check: DB reachable (5434)",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "python - <<'PY'\nimport os, sys, socket\nhost = os.environ.get('DB_HOST','localhost')\nport = int(os.environ.get('DB_PORT','5434'))\ns=socket.socket();\ns.settimeout(2);\ntry:\n s.connect((host,port));\n print(f'OK: Postgres reachable at {host}:{port}')\n sys.exit(0)\nexcept Exception as e:\n print(f'FAIL: Cannot reach Postgres at {host}:{port} -> {e}')\n sys.exit(1)\nPY"],
      "problemMatcher": []
    },
    {
      "label": "Check: DATABASE_URL env",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "set -a; [ -f .env ] && . ./.env; set +a; python - <<'PY'\nimport os, sys\nurl=os.environ.get('DATABASE_URL')\nprint('DATABASE_URL =', url or '(missing)')\nsys.exit(0 if url else 1)\nPY"],
      "problemMatcher": []
    },
    {
      "label": "Init DB (flask init-db)",
      "type": "shell",
      "command": "bash",
      "args": ["-lc", "set -a; [ -f .env ] && . ./.env; set +a; \nexport FLASK_APP=run:app; export FLASK_ENV=development; \npython -m flask init-db"],
      "problemMatcher": []
    }
    ,
    {
      "label": "Start web container with debugpy",
      "type": "shell",
      "command": "bash",
      "args": [
        "-lc",
        "docker compose -f docker-compose.dev.yml up -d web && docker compose exec -T web bash -lc 'python -m pip install -q debugpy || true; python -m debugpy --listen 0.0.0.0:5678 -m flask run --no-debugger --no-reload --host 0.0.0.0 --port 5000'"
      ],
      "isBackground": true,
      "problemMatcher": []
    }
  ]
}
