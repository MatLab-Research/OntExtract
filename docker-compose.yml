version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg17
    container_name: ontextract_db
    environment:
      POSTGRES_DB: ontextract_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: PASS
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ontextract_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ontextract_network

  db_init:
    image: postgres:17-alpine
    container_name: ontextract_db_init
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: PASS
      POSTGRES_DB: ontextract_db
      DB_HOST: db
      DB_PORT: 5432
    volumes:
      - ./scripts/db-ensure.sh:/docker-entrypoint-initdb.d/db-ensure.sh:ro
    entrypoint: ["sh", "/docker-entrypoint-initdb.d/db-ensure.sh"]
    networks:
      - ontextract_network

  web:
    build: .
    container_name: ontextract_web
    environment:
      - DATABASE_URL=postgresql://postgres:PASS@db:5432/ontextract_db
      - SECRET_KEY=your_production_secret_key_change_this
      - FLASK_ENV=production
      - FLASK_APP=run.py
      - DEBUG=False
      - CHECK_GIT_UPDATES=true
      - GIT_BRANCH=main
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ontextract_network
    restart: unless-stopped

volumes:
  postgres_data:
  uploads_data:
  logs_data:

networks:
  ontextract_network:
    driver: bridge
